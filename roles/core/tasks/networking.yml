### Get the name of the interface ###
### In my case, my laptop using wifi ###
- name: Obtain interface name
  command: ip link show
  register: ip_link_output
  tags:
    - core
    - networking

- name: Filter interface name
  set_fact:
    interface_name: "{{ ip_link_output.stdout_lines | select('match', '^\\s*\\d+:\\s+(wl\\S+):\\s+.+$') | map('regex_replace', '^\\s*\\d+:\\s+(wl\\S+):\\s+.+$', '\\1') | list | first }}"
  when: ip_link_output.stdout_lines | select('match', '^\\s*\\d+:\\s+(wl\\S+):\\s+.+$') | list | count > 0
  tags:
    - core
    - networking

### Copy macchanger systemd service ###
- name: Copy macchanger systemd service
  ansible.builtin.copy:
    src: misc/macspoof@.service
    dest: "/etc/systemd/system/macspoof@.service"
    remote_src: false
  tags:
   - core
   - networking

- name: Enable systemd service for MAC spoofing
  systemd:
    name: "macspoof@{{ interface_name }}.service"
    enabled: yes
  tags:
   - core
   - networking

### Setup network-manager ###
### Connection will be lost ###
- name: Modify network manager
  replace:
    path: /etc/NetworkManager/NetworkManager.conf
    regexp: '^managed=false'
    replace: 'managed=true'
  tags:
   - core
   - networking

- name: Copy network interfaces file
  ansible.builtin.copy:
    src: misc/interfaces
    dest: "/etc/network/interfaces"
    remote_src: false
    backup: true
  no_log: true
  tags:
   - core
   - networking

- name: Restart wpa_supplicant
  ansible.builtin.systemd_service:
   state: restarted
   daemon_reload: true
   name: wpa_supplicant
   enabled: true
  tags:
   - core
   - networking

- name: Enable network-manager
  ansible.builtin.systemd_service:
   state: restarted
   daemon_reload: true
   name: NetworkManager
   enabled: true
  tags:
   - core
   - networking

- name: Setup nmcli
  become: true
  become_user: "{{ user_name }}"
  command: "nmcli device wifi connect '{{ wpa_ssid }}' password '{{ wpa_psk }}'"
  tags:
   - core
   - networking